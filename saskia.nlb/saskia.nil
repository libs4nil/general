// License Information:
// saskia.nlb/saskia.nil
// SASKIA
// version: 19.07.28
// Copyright (C)  Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information


// SASKIA = Serial Adventure Scripting Keeping Interface Advancements
//
// SASKIA is a pretty simple scripter set up in NIL, meant to avoid 
// the woes of engines where callbacks are standard or even mandadory.
//
// Now SASKIA has been written in NIL, but it should be easy to 
// translate the code to other scripting languages such as Lua (Duh, 
// since that is what NIL already does), squirrel and JavaScript (the
// latter in particular can be interesting.

// The Syntax may remind you of assembler, but it's not nearly as fast
// (On the contray actually, and therefore SASKIA should only be used
// to fake a serial approach to a callback-only environment).
// The syntax to ALL instructions is INSTRUNCTION Para1,para2,para3 etc.
// Please note it was not set up to be "turing-complete", as that should
// be taken up by the underlying programs.

// This line is set up for Bubble engines. When used in alternate engines
// you may need to alter the foldername a little bit.

#use "libs/strings"
#use "libs/stack"
#use "libs/linkedlist"
#use "libs/datetime"

#macro saskiatimeout true


//delegate SASKIA_CHAT
delegate compile
var retval
table instruction
table instructionstrue
table instructionsmeta

void as_tmo()
	if saskiatimeout
		Now.AssertTimeOut()
	end
end

// Older versions of Lua use 'loadstring'. Newer versions use 'load'. I had to keep both possibilities in mind here!
#pure
compile = loadstring or load 
#endpure

instructionsmeta.__newindex = void()
	error("The instruction table is READ ONLY!")
end

instructionsmeta.__index = var(t,string k)
	return assert(instructionstrue[k],"Instruction "..k.." doesn't exist")
end

setmetatable(instruction,instructionsmeta)

instructionstrue.CALL = void (session,params)
	string f
	string d
	delegate ls
	f = params[1]
	d = "return "..f .. "("
	for i,p in pairs(params) do
		if i>1 and p!="" then
			if i>2 then d = d ..", " end
			d = d .. p
		end
	end
	d = d .. ")"
	//CWriteLine(d,180,255,0)
	ls = assert(compile(d,"SASKIA CALL"))
	retval = ls()
end

instructionstrue.JMP = void (session,string label)
	var script
	script = session.script
	assert(script.labels[label[1]],"Label '"..label[1].."' doesn't exist!")
	session.curline = script.label[label[1]] - 1
end

instructionstrue.CHK = void (session,para)
	delegate ls
	ls = compile("return "..para[1])
	if ls() 
		instructionstrue.JMP(session,para[2])
	end
end

instructionstrue.MOV = void(session,para)
	delegate ls
	CSayF("Moving value %s into variable %s",para[1],para[2]) // debug
	ls = assert(compile(para[2] .. " = "..para[1]))
	ls()
end

instructionstrue["END"] = void(session)
	session.running=false
end

instructionstrue.GROUP = void(session,para)
	session.dontyield = tonumber(para[1] or 2)
end

instructionstrue["RETURN"] = void(session)
	session.curline = session.insstack.Value
	if not session.curline
		session.running=false
	end
end

instructionstrue.GOSUB = void(session,params)
	session.insstack.Value = session.curline
	instruction.JMP(session,params)
end

string DefaultLoadFunction(string filename)
	var f
	string content
	f = assert(io.open(filename, "rb"))
	content = f:read("*all")
	f:close()
	return content
end	





#pure
local
#endpure
class CL_SASINS
	string command
	table para
	
	void CONSTRUCTOR(cmd,para)
		self.command=cmd
		self.para = para
	end
end

#pure
local
#endpure
class CL_SESSION
	int curline = 0
	int dontyield = 0
	bool running = false
	var insstack
	var script
	
	
	
	void CONSTRUCTOR(script,startlabel)
		startlabel = startlabel or ""
		assert(type(startlabel)=="string","String expected for startlabel")
		self.script=script
		if startlabel 
			//CSay(NIL.LuaSerialize("labels",script.labels))
			assert(script.labels[startlabel],"Label '"..startlabel.."' not found! Cannot start session!\n"..debug.traceback())
			self.curline = script.labels[startlabel]
		end
		self.insstack = stack()
		self.script = script
	end
end

//#pure
//local
//#endpure

#macro CL_SASKIA SASKIA
class SASKIA
	table instr
	table labels
	static var sessions
	
	static delegate LoadFunction
	
	static var LoadScript(file)
		string script
		script = (CL_SASKIA.LoadFunction or DefaultLoadFunction)(file)
		return new CL_SASKIA(script)
	end
	
	void Parse(script)
		self.labels = {}
		self.instr = {}
		table lines
		lines = brutesplit(script,'\n')
		Now.StartTimeOut(10)
		for i=1,#lines
			as_tmo()
			//CSay(NIL.LuaSerialize(i.."; lines",lines))
			lines[i] = Trim(lines[i])
			if Left(lines[i],1)==";" or (Trim(lines[i])=="")
				// Nothing at all here!
			elseif Left(lines[i],1)==":"
				self.labels[Right(lines[i],#lines[i]-1)] = #self.instr + 1
			else
				string cmd
				table para
				int parap = 1
				int p=1
				int haakjes = 0
				bool reeks = false
				int timeout = 10000
				//while not (p>=#lines[i] or (Mid(lines[i],p,1)==" " and (not reeks)) or (Mid(lines[i],p,1)=="\t" and (not reeks)))
				while not (p>=#lines[i] or Mid(lines[i],p,1)==" " or Mid(lines[i],p,1)=="\t")
					as_tmo()
					p = p + 1
					timeout--
					assert(timeout>0,"TIMEOUT!") 
				end
				cmd = string.upper(trim(Left(lines[i],p)))
				p++
				// ------ CSayF("From line %d comes instruction %s (%s) (whitespace is on %d)",i,lines[i],cmd,p)
				while p<=#lines[i]
					as_tmo()
					para[parap] = para[parap] or ""
					//--CSayF("SASKIA DEBUG: %3d/%3d/%3d >> %s",i,p,parap,NIL.LuaSerialize('para',para))
					switch Mid(lines[i],p,1)
						case "\""
							para[parap] = para[parap] .. "\""
							reeks = not reeks
						case "("
							if not reeks
								haakjes = haakjes + 1
							end
							para[parap] = para[parap] .. "("
						case ")"
							if not reeks
								assert(haakjes>0,"unexpected ) in SASKIA script line #"..i)							
								haakjes = haakjes - 1
							end
							para[parap] = para[parap] .. ")"
						case ","
							parap = parap + 1
							para [parap]=""
						default
							para[parap] = para[parap] .. Mid(lines[i],p,1)
					end
					p++
				end
				assert(haakjes == 0 and (not reeks),"Unexpected end of line #"..i.." in SASKIA script")
				self.instr[#self.instr+1] = new CL_SASINS(cmd,para)
				for i=1,#para 
					para[i]=trim(para[i])
				end
			end
		end
		//Annoy("SASKIA SCRIPT PARSED!") // debug 
	end
		
	void CONSTRUCTOR(string script)
		self.Parse(script)
		self.sessions = self.sessions or new TLinkedList
	end
		
	void Start(string label)
		var s
		s = new CL_SESSION(self,label)
		s.running = true;
		self.sessions.AddLast(s)
		//CSayF("Session begin at label \"%s\"; reference: %s; Open sessions: %d",label,tostring(s),self.sessions.Count)
	end
	
	static void Cycle()
		//CWriteLine("SASKIA START CYCLE",255,255,0)
		//CSayF("Sessions %3d ",CL_SASKIA.sessions.Count)
		for ses,lnk in CL_SASKIA.sessions.Each
			//CSayF("Session: %s :Start",tostring(ses))
			if (not ses.running) or ses.curline>#ses.script.instr
				lnk.UnLink()
			else
				var ins
				//CWriteLine("Group NoYield start!",180,0,255)
				repeat
					//-- CSayF("SASKIA SESSION: %3d - %3d > %s",ses.curline,ses.dontyield,ses.instr[ses.curline])
					if ses.dontyield>0 then ses.dontyield = ses.dontyield - 1 end
					ins = ses.script.instr[ses.curline]
					//CSayF("SASKIA INSTRUCTION #%d (noyield %d) >> %s\n",ses.curline,ses.dontyield,ins[".dump"])
					//CSay(NIL.LuaSerialize(">> Parameters",ins.para))
					if ins
						instruction[ins.command](ses,ins.para)
					end
					ses.curline = ses.curline + 1
				until ses.dontyield<=0
			end
		end
	end
end



//#pure
//return CL_SASKIA
//#endpure


