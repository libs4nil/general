// License Information:
// tables.nlb/tables.nil
// tables for NIL
// version: 19.10.29
// Copyright (C)  Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information



// Please note... "function" does not do in NIL as it does in Lua!!!
// In NIL it means that a function is returned. In this case (how coincidental) by a function :P
//function itpairs(mytab)
//  int i = 0
//  return var()
//      i = i + 1
//      if mytab[i] then return i,trim(mytab[i]) end
//      //return 
//  end
//end


global var tcontains(t,v)
    for i,iv in ipairs(t) do
        if iv==v then return i end
    end
    return
end

global function spairs(t, order)
    //-- collect the keys
    table keys
    table t2 
    for k,v in pairs(t) do keys[#keys+1] = k  t2[k]=v end
    //-- if order function given, sort by it by passing the table and keys a, b,
    //-- otherwise just sort the keys 
    if order then
		var bo(a,b) 
			return order(t, a, b) 
		end
        table.sort(keys, bo)
    else
        table.sort(keys)
    end
    //-- return the iterator function
    int i = 0
    return var()
        i = i + 1
        if keys[i] then
			#pure
			return keys[i], t2[keys[i]]
			#endpure
        end
    end
end


global table shuffletable(t)
	table ret
	for _,v in ipairs(t)
		int i
		repeat
			i=math.random(1,#t)
		until not ret[i]
		ret[i]=v
	end
	return ret
end


global function each(table t)
	// I copied the table to make sure, removals during a for-each 
	// will not kill the loop
	table r
	for _,v in ipairs(t) 
		r[#r+1]=v
	end
	int i = 0
	return var()
		i = i + 1
		return r[i]
	end
end

global table tablecopy(table original,recurse)
	table ret
	for k,v in pairs(original)
		if recurse and type(v)=="table"
			ret[k] = tablecopy(v,true)
		else
			ret[k] = v
		end
	end
	return ret
end

global void tableclear(table vuil,recurse,sf)
	table kill
	// "sf" is only needed to prevent stack overflow errors in recursive
	// actions, as that can (and will) happen in cyclic references in 
	// tables. Please note, if classes or metatables are used
	// this function will not function properly.
	sf = sf or {}
	for k,v in pairs(vuil)
		if type(v)=="table" and recurse and (not sf[v])
			sf[v]=true;
			tableclear(sf[v],true,sf)
		end
		kill[#kill+1]=k
	end
	for k in each(kill)
		vuil[k]=nil;
	end
end

global bool arraycontains(table tabel,element)
	bool ret
	for item in each(tabel)
		ret = ret or (item==element)
	end
	return ret
end


