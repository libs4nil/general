#pure
local
#endpure

class Stack
	private table values
	private string wantedtype
	
	void CONSTRUCTOR(mytype)
		mytype = mytype or "var"
		switch mytype
			case "string" "var" "number" "table" "function" "boolean"
				self.wantedtype = mytype
			case "delegate"
				self.wantedtype = "function"
			case "int"
				self.wantedtype = "number"
			case "bool"
				self.wantedtype = "bool"
			case "nil"
				error("'nil' is not allowed for stacking!")
			default
				error("Unknown type requested")
		end
	end
	
	get var Value
		var ret
		if #values<=0 then return nil end
		ret = self.values[#values]
		self.values[#values]=nil // popping = removing too!
		return ret
	end
	
	set var Value
		assert(value and (self.wantedtype=="var" or type(value)==self.wantedtype),"Stack wants "..self.wantedtype.."; got "..type(value))
		self.values[#values+1] = value
	end
	
	void Push(v)
		self.Value = v
	end
	
	var Pop()
		return self.Value
	end
	
	get var PopEach
		return var()
			return self.Value
		end
	end
	
	get var NoPopEach
		int i
		i=#self.values + 1
		return var()
			i = i - 1
			if i<=0 then return nil end
			return self.values[i]
		end
	end
end

#pure
return Stack
#endpure
