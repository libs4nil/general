// License Information:
// strings.nlb/strings.nil
// strings for NIL
// version: 19.07.16
// Copyright (C)  Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information




// BASIC slice
var substr
substr = string.sub

global string left(string s, l)
	l = l or 1
	assert(type(l)=="number","Number expected for second argument in 'left'")
	return substr(s,1,l)
end 

global var Left
Left=left

global string right(s,l)
	int ln
	string st
	ln = l or 1
	st = s or "nostring"
	return substr(st,-ln,-1)
end 

global var Right
Right=right

global string mid(string s,o,l)
	var ln
	var of
	var st
	ln=l or 1
	of=o or 1
	st=s or ""
  return substr(st,of,(of+ln)-1)
end 

var Mid
Mid=mid


global string trim(string s)
  return (s:gsub("^%s*(.-)%s*$", "%1"))
end
global delegate Trim
Trim=trim

global bool prefixed(string str, string prefix) 
   return left(str,#prefix)==prefix 
end


global bool suffixed(string str, string suffix) 
   return right(str,#suffix)==suffix 
end

global delegate replace
replace = string.gsub

// Split
global delegate Split
global var split(string inputstr, string sep)
        if sep == nil then
                sep = "%s"
        end
        table t
        int i=1
        for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
                t[i] = str
                i = i + 1
        end
        return t
end; Split=split


global var brutesplit(inputstr,sep)
	var s
	s = sep or "\n"
	table t
	int i=1
	int ti=1
	int skip=0
	for i=1,#inputstr do
		if mid(inputstr,i,#sep)==sep then 
			ti = ti + 1 
			skip=#sep-1
		elseif skip>0 then
			skip = skip - 1 
		else
			t[ti] = t[ti] or ""
			t[ti] = t[ti] .. mid(inputstr,i,1)
		end
	end
	//-- for i,v in ipairs(t) do print(i,v) end
	return t
end

#pure
-- NIL does not (yet) have good support for unlimited parameters.
sprintf=string.format
function printf(fmt,...)
	print(sprintf(fmt,...))
end
if CSay then
	function CSayF(fmt,...)
		CSay(sprintf(fmt,...))
	end
end
#endpure
#accept printf
#accept sprintf

global string SafeString(string str)
	table strings
	#pure
	strings = string
	#endpure
	
	string ret
	for i=1,#str
		int bt
		string ch
		ch = mid(str,i,1)
		bt = strings.byte(ch)
		if ch==" " or ch=="_" or ch=="." or ch=="," or ch==":" or ch==";" or (bt>=65 and bt<=90) or (bt>=97 and bt<=122) or (bt>=48 and bt<=57)
			ret = ret .. ch
		else
			ret = ret .. sprintf("\\%03d",bt)
		end
	end
	return ret
end



