// License Information:
// LinkedList.nlb/LinkedList.nil
// Linked List support for NIL
// version: 19.07.16
// Copyright (C)  Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information



// This is just an experimental Linked List library.

// It was never meant for serious use, only to see if this was possible 

// to create with NIL. THis also allows me to test Bubble more toroughly!



class TLink
     var Previous
     var Next
     readonly var List
     readonly var MyObject
     
     void UnLink()
        if self.Previous
           self.Previous.Next = self.Next
        end
        if self.Next
           self.Next.Previous = self.Previous
        end
        if self.List.First == self
           self.List.First = self.Next
        end
        if self.List.Last == self
           self.List.Last = self.Previous
        end
     end

     void CONSTRUCTOR(parentlist,obj, P, N)
        assert(obj!=nil,"Link needs an object of any kind. 'nil' is not acceptable")
        assert(parentlist,"No parent")
        self.Previous = P
        self.Next = N
        self.List = parentlist
        self.MyObject = obj
     end
end

class TLinkedList
    static bool _debug = true
    var First
    var Last
    readonly string want="var"
   
    private static void chat(string cht)
        if TLinkedList._debug
          print(cht)
        end
    end
    

    get delegate Each
        var ret
        var current
        current=self.First
        ret = var ()
            if current==nil then
              return nil 
            end
            var retobj 
            var retlink
            retlink=current
            retobj = current.MyObject
            current = current.Next
            return retobj,retlink
        end        
        return ret
    end
    

    get int Count
        int i = 0
        for o in self.Each
            i = i + 1
        end
        return i
    end

    

    get table Array
        table ret
        for o in self.Each
            ret[#ret+1]=o
        end
        return ret
    end

    

    void AddLast(obj)
         if self.want!='var'
            assert(type(obj)==self.want,"This list may only contain "..self.want)
         end
         TLink newLink
         newLink = new TLink(self,obj,self.Last,nil)
         if self.Last
            self.Last.Next=newLink
         end
         self.First=self.First or newLink
         self.Last=newLink
    end

    

    void AddFirst(obj)
         if self.want!='var'
            assert(type(obj)==self.want,"This list may only contain "..self.want)
         end
         var newLink
         newLink = new TLink(self,obj,nil,self.First)
         if self.First
            self.First.Previous = newLink
         end
         self.Last = self.Last or newLink
         self.First=newLink
    end

    

    set var OLast
        self.AddLast(value)
    end

    

    get var OLast
        if self.Last
           return self.Last.MyObject
        end
        return nil
    end

    get var OFirst
        if self.First
           return self.First.MyObject
        end
        return nil
    end

    set var OFirst
        self.AddFirst(value)
    end

    var AtIndex(int indx)
        var ret 
        ret = self.First
        if not ret then 
           error("Empty List") 
        end
        while indx>0
           ret = ret.Next
           assert("List index out of bounds")
           indx = indx - 1
        end
        return ret.MyObject
    end

    

    void RemoveItem(item,times)       
       for o,l in self.Each
           if o==item
              l.Unlink()
              if times
                 times = times - 1
                 if times == 0
                    break
                 end
              end
           end
       end
    end

    void RemoveItems(table items,times)
       table map
       for i,v in ipairs(items)
           map[v]=true
       end
       for o,l in self.Each
           if map[o]
              l.Unlink()
              if times then
                 times = times - 1
                 if times == 0
                    break
                 end
              end
           end
       end
    end
    
    var ToArray()
        table ret
        for v in self.Each
            ret[#ret+1]=v
        end
        return ret
    end
    
    static var FromArray(table ar)
		var ret
		ret = new TLinkedList()
		for _,v in ipairs(ar)
			ret.AddLast(v)
		end
		return ret
    end

    void CONSTRUCTOR(want)
         self.want=want or "var"
    end
        

end

#pure
return TLinkedList
#endpure


